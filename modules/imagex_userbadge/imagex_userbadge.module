<?php

/**
 * @file
 * Module for the UserBadges Entity
 */  


/**
 * Implement hook_entity_info().
 */
function imagex_userbadge_entity_info() {
  $return['imagex_userbadge'] = array(
    'label' => t('User Badge'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'ImagexUserBadge',
    'controller class' => 'ImagexUserBadgeController',
    'base table' => 'imagex_userbadge',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'badge_id',
        'bundle' => 'type',
        'uuid' => 'uuid',
    ),
    // Bundles are defined by the badge types below
    'bundles' => array(
      'badge' => array(
        'label' => t('Badge'),
        'admin' => array(
          'path' => 'admin/config/people/badges/badge',
          'access arguments' => array('administer user badges'),
        ),
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'imagex_userbadge_create',
    'access callback' => 'imagex_userbadge_access',
    'module' => 'imagex_userbadge',
    // The information below is used by the badgeUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/people/badges',
      'file' => 'imagex_userbadge.admin.inc',
      'controller class' => 'ImagexUserBadgeUIController',
      'menu wildcard' => '%imagex_userbadge',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('User Badge Page'),
        'custom settings' => TRUE,
      ),
    ),
    'uuid' => TRUE,
  );

  return $return;
}
  

/**
 * Implements hook_permission().
 */
function imagex_userbadge_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer user badges' => array(
      'title' => t('Administer User Badges'),
      'description' => t('Create, edit, delete, and assign User Badges'),
    ),
    'view user badges' => array(
      'title' => t('View User Badges'),
      'description' => t('View user badges pages and links'),
    ),
  );
  
  return $permissions;  
}


/**
 * Determines whether the given user has access to a badge.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $badge
 *   Optionally a badge or a badge type to check access for. If nothing is
 *   given, access for all badges is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function imagex_userbadge_access($op = NULL, $badge = NULL, $account = NULL) {
  if (user_access('administer user badges', $account)) {
    return TRUE;
  }
  switch ($op) {
    case 'view':
      if (user_access('view user badges', $account)) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * Fetch a Badge object. Make sure that the wildcard you choose 
 * in the badge entity definition fits the function name here.
 *
 * @param $badge_id
 *   Integer specifying the badge id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $badge object or FALSE if it cannot be loaded.
 *
 * @see badge_load_multiple()
 */
function imagex_userbadge_load($badge_id, $reset = FALSE) {
  $badges = imagex_userbadge_load_multiple(array($badge_id), array(), $reset);
  return reset($badges);
}


/**
 * Load multiple badges based on certain conditions.
 *
 * @param $badge_ids
 *   An array of badge IDs.
 * @param $conditions
 *   An array of conditions to match against the {badge} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of badge objects, indexed by badge_id.
 *
 * @see entity_load()
 * @see imagex_userbadge_load()
 */
function imagex_userbadge_load_multiple($badge_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('imagex_userbadge', $badge_ids, $conditions, $reset);
}


/**
 * Deletes a badge.
 */
function imagex_userbadge_delete(ImagexUserBadge $badge) {
  $badge->delete();
}


/**
 * Delete multiple badges.
 *
 * @param $badge_ids
 *   An array of badge IDs.
 */
function imagex_userbadge_delete_multiple(array $badge_ids) {
  entity_get_controller('imagex_userbadge')->delete($badge_ids);
}


/**
 * Create a badge object.
 */
function imagex_userbadge_create($values = array()) {
  return entity_get_controller('imagex_userbadge')->create($values);
}


/**
 * Saves a badge to the database.
 *
 * @param $badge
 *   The badge object.
 */
function imagex_userbadge_save(ImagexUserBadge $badge) {
  return $badge->save();
}


/**
 * URI callback for badges
 */
function imagex_userbadge_uri(ImagexUserBadge $badge){
  return array(
    'path' => 'badge/' . $badge->badge_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function imagex_userbadge_page_title(ImagexUserBadge $badge){
  return $badge->name;
}


/**
 * Sets up content to show an individual badge
 * @todo - get rid of drupal_set_title();
 */
function imagex_userbadge_page_view($badge, $view_mode = 'full') {    
  $controller = entity_get_controller('imagex_userbadge');  
  $content = $controller->view(array($badge->badge_id => $badge));
  drupal_set_title($badge->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function imagex_userbadge_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'imagex_userbadge') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function imagex_userbadge_theme() {
  return array(
    'imagex_userbadge' => array(
      'render element' => 'elements',
      'template' => 'imagex_userbadge',
    ),
  );
}  

/**
 * Implements hook_menu().
 */
function imagex_userbadge_menu() { 
  $items['admin/config/people/badges'] = array(
   'title' => 'Badges',
   'description' => 'Configure user badges.',
   'position' => 'left',
   'weight' => -20,
   'page callback' => 'drupal_get_form',
   'page arguments' => array('imagex_userbadge_admin_page'),
   'access arguments' => array('administer user badges'),
   'file' => 'imagex_userbadge.admin.inc',
  );
  $items['admin/config/people/badges/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function imagex_userbadge_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/people/badges') {
    $item = menu_get_item('admin/people/badges/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function imagex_userbadge_field_extra_fields() { 
  $fields['imagex_userbadge']['badge'] = array(
    'form' => array(
      'name' => array(
        'label' => 'Badge Name',
        'description' => t('User Badge module element'),
        'weight' => -10,
      ),
    ),
  );
  
  return $fields;
}

/**
 * Implements hook_user_load().
 */
function imagex_userbadge_user_load($users) { 
  $result = db_query('SELECT uid, badge_id FROM {imagex_userbadge_relationship} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->badges[] = $record->badge_id;
  }
}

/**
 * Implements hook_action_info().
 */
function imagex_userbadge_action_info() { 
  return array(
    'imagex_userbadge_relate_action' => array(
      'type' => 'user',
      'label' => t('Add a Userbadge to a User'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'imagex_userbadge_unrelate_action' => array(
      'type' => 'user',
      'label' => t('Remove a Userbadge from a User'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Adds a user badge to a user
 */
function imagex_userbadge_relate_action(&$entity, $context = array()) {
  
}

/**
 * Removes a user badge from a user
 */
function imagex_userbadge_unrelate_action(&$entity, $context = array()) {
  
}


/**
 * Implements hook_rules_condition_info()
 */
function imagex_userbadge_rules_condition_info() {
  return array(
    'imagex_userbadge_condition_check_points' => array(
      'label' => t('Check how many !points a user has', userpoints_translation()),
      'named parameter' => TRUE,
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
          'description' => t('The user whose !points to check', userpoints_translation()),
        ),
        'tid' => array(
          'label' => t('!Points category', userpoints_translation()),
          'type' => 'integer',
          'options list' => 'userpoints_rules_get_categories',
        ),
        'threshold' => array(
          'type' => 'integer',
          'label' => t('Threshold'),
          'description' => t('Compare the number of !points the user has to this number', userpoints_translation()),
        ),
        'comparison' => array(
          'type' => 'text',
          'label' => t('Comparison'),
          'description' => t('How to compare the user\'s !points with the threshold', userpoints_translation()),
          'options list' => 'imagex_userbadge_condition_get_comparisons',
        ),
      ),
      'group' => t('!Points', userpoints_translation()),
    ),
  );
}

/**
 * Rules condition - compare the user's points to a threshold
 */
function imagex_userbadge_condition_check_points($params) {
  $points = userpoints_get_current_points($params['user']->uid, $params['tid']);
  $threshold = $params['threshold'];
  switch ($params['comparison']) {
    case 'lt':
      if ($threshold > $points) { return true; } else { return false; }
      break;
    case 'le':
      if ($threshold >= $points) { return true; } else { return false; }
      break;
    case 'eq':
      if ($threshold == $points) { return true; } else { return false; }
      break;
    case 'ge':
      if ($threshold <= $points) { return true; } else { return false; }
      break;
    case 'gt':
      if ($threshold < $points) { return true; } else { return false; }
      break;
  }
  return false;
}

/**
 * Returns options for ways to compare a number to a number of points.
 */
function imagex_userbadge_condition_get_comparisons() {
  return array(
    'lt' => t('Less than'),
    'le' => t('Less than or equal to'),
    'eq' => t('Equal to'),
    'ge' => t('Greater than or equal to'),
    'gt' => t('Greater than'),
  );
}

/**
 * Implements hook_preprocess_imagex_userbadge().
 */
function template_preprocess_imagex_userbadge(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $badge = $variables['elements']['#entity'];
  $variables['imagex_userbadge'] = $badge;
  
  $variables['date']      = format_date($badge->created);
  $variables['name']      = theme('username', array('account' => $badge));

  $uri = entity_uri('imagex_userbadge', $badge);
  $variables['url']  = url($uri['path'], $uri['options']);
  $variables['title']     = check_plain($badge->name);
  if (isset($variables['elements']['#page'])) {
    // If set by the caller, respect the page property.
    $variables['page'] = $variables['elements']['#page'];
  }
  else {
    // Else, try to automatically detect it.
    $variables['page'] = $uri && $uri['path'] == $_GET['q'];
  }
  
  // Flatten the node object's member fields.
  $variables = array_merge((array) $badge, $variables);

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (element_children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('imagex_userbadge', $badge, $variables['content'], $variables);

  // Clean up name so there are no underscores.
  $variables['theme_hook_suggestions'][] = 'imagex_userbadge__' . $badge->badge_id;
}

/**
 * Implements hook_features_api().
 */
function imagex_userbadge_features_api() { 
  $components = array();

  $components['uuid_badge'] = array(
    'name' => t('Badges'),
    'feature_source' => TRUE,
    'default_hook' => 'uuid_features_default_badges',
    'default_file' => FEATURES_DEFAULTS_INCLUDED,
    'file' => drupal_get_path('module', 'imagex_userbadge') . '/features/uuid_badge.features.inc',
  );
  
  return $components;
}

/**
 * The class used for badge entities
 */
class ImagexUserBadge extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'imagex_userbadge');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'badge/' . $this->badge_id);
  }
  
  
}

/**
 * The Controller for badge entities
 */
class ImagexUserBadgeController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a badge - we first set up the values that are specific
   * to our badge schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the badge.
   *
   * @return
   *   A badge object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our badge
    $values += array( 
      'badge_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $badge = parent::create($values);
    return $badge;
  }
  
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    // Remove previously built content, if exists.
    $entity->content = $content;
    $langcode = isset($langcode) ? $langcode : $GLOBALS['language_content']->language;
    // Add in fields.
    if (!empty($this->entityInfo['fieldable'])) {
      // Perform the preparation tasks if they have not been performed yet.
      // An internal flag prevents the operation from running twice.
      $key = isset($entity->{$this->idKey}) ? $entity->{$this->idKey} : NULL;
      field_attach_prepare_view($this->entityType, array($key => $entity), $view_mode);
      $entity->content += field_attach_view($this->entityType, $entity, $view_mode, $langcode);
    }
    // Invoke hook_ENTITY_view() to allow modules to add their additions.
    if (module_exists('rules')) {
      rules_invoke_all($this->entityType . '_view', $entity, $view_mode, $langcode);
    }
    else {
      module_invoke_all($this->entityType . '_view', $entity, $view_mode, $langcode);
    }
    module_invoke_all('entity_view', $entity, $this->entityType, $view_mode, $langcode);
    $build = $entity->content;
    unset($entity->content);
    return $build;
  }

  /**
   * Implements EntityAPIControllerInterface.
   */
  public function view($entities, $view_mode = 'full', $langcode = NULL, $page = NULL) {
    // For Field API and entity_prepare_view, the entities have to be keyed by
    // (numeric) id.
    $entities = entity_key_array_by_property($entities, $this->idKey);
    if (!empty($this->entityInfo['fieldable'])) {
      field_attach_prepare_view($this->entityType, $entities, $view_mode);
    }
    entity_prepare_view($this->entityType, $entities);
    $langcode = isset($langcode) ? $langcode : $GLOBALS['language_content']->language;

    $view = array();
    foreach ($entities as $entity) {
      $build = entity_build_content($this->entityType, $entity, $view_mode, $langcode);
      $build += array(
        // If the entity type provides an implementation, use this instead the
        // generic one.
        // @see template_preprocess_entity()
        '#theme' => 'imagex_userbadge',
        '#entity_type' => $this->entityType,
        '#entity' => $entity,
        '#view_mode' => $view_mode,
        '#language' => $langcode,
        '#page' => $page,
      );
      // Allow modules to modify the structured entity.
      drupal_alter(array($this->entityType . '_view', 'entity_view'), $build, $this->entityType);
      $key = isset($entity->{$this->idKey}) ? $entity->{$this->idKey} : NULL;
      $view[$this->entityType][$key] = $build;
    }
    return $view;
  }
}
